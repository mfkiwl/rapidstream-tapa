"""User C++ headers for writing TAPA programs."""

# Copyright (c) 2024 RapidStream Design Automation, Inc. and contributors.
# All rights reserved. The contributor(s) of this file has/have agreed to the
# RapidStream Contributor License Agreement.

load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")
load("@rules_pkg//pkg:mappings.bzl", "pkg_filegroup", "pkg_files", "strip_prefix")
load("//bazel:header_extractor.bzl", "header_extractor")

bool_flag(
    name = "enable_coroutine",
    build_setting_default = True,  # Enable with `--//tapa-lib:tapa_enable_coroutine`
)

config_setting(
    name = "coroutine_enabled",
    flag_values = {":enable_coroutine": "True"},
)

cc_library(
    name = "tapa",
    srcs = [
        "tapa/host/internal_util.cpp",
        "tapa/host/internal_util.h",
        "tapa/host/stream.cpp",
        "tapa/host/task.cpp",
    ],
    hdrs = [
        "tapa.h",
        "tapa/base/logging.h",
        "tapa/base/mmap.h",
        "tapa/base/stream.h",
        "tapa/base/tapa.h",
        "tapa/base/task.h",
        "tapa/base/util.h",
        "tapa/compat.h",
        "tapa/host/coroutine.h",
        "tapa/host/logging.h",
        "tapa/host/mmap.h",
        "tapa/host/stream.h",
        "tapa/host/tapa.h",
        "tapa/host/task.h",
        "tapa/host/util.h",
        "tapa/host/vec.h",
        "tapa/stub/logging.h",
        "tapa/stub/mmap.h",
        "tapa/stub/stream.h",
        "tapa/stub/tapa.h",
        "tapa/stub/task.h",
        "tapa/stub/util.h",
        "tapa/stub/vec.h",
        "tapa/xilinx/hls/logging.h",
        "tapa/xilinx/hls/mmap.h",
        "tapa/xilinx/hls/stream.h",
        "tapa/xilinx/hls/tapa.h",
        "tapa/xilinx/hls/task.h",
        "tapa/xilinx/hls/util.h",
        "tapa/xilinx/hls/vec.h",
    ],
    includes = ["."],
    local_defines = select({
        ":coroutine_enabled": ["TAPA_ENABLE_COROUTINE"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        "//fpga-runtime:frt",
        "@boost//:coroutine2",
        "@boost//:thread",
        "@glog",
    ],
)

cc_library(
    name = "scoped_set_env",
    hdrs = ["tapa/scoped_set_env.h"],
    deps = [
        "@glog",
    ],
)

cc_library(
    name = "scoped_log_sink_mock",
    testonly = True,
    hdrs = ["tapa/scoped_log_sink_mock.h"],
    deps = [
        "@glog",
        "@googletest//:gtest",
    ],
)

cc_test(
    name = "tapa-lib-test",
    size = "small",
    srcs = glob(["tapa/**/*_test.cpp"]),
    visibility = ["//visibility:public"],
    deps = [
        ":scoped_log_sink_mock",
        ":scoped_set_env",
        ":tapa",
        "@googletest//:gtest",
        "@googletest//:gtest_main",
    ],
)

filegroup(
    name = "include",
    srcs = glob([
        "tapa/**/*.h",
    ]) + ["tapa.h"],
    visibility = ["//visibility:public"],
)

header_extractor(
    name = "extra-runtime-include",
    visibility = ["//visibility:public"],
    deps = ["@glog"],
)

pkg_files(
    name = "pkg-lib",
    srcs = [":tapa"],
    prefix = "usr/lib",
    strip_prefix = strip_prefix.files_only(),
    visibility = ["//visibility:public"],
)

pkg_files(
    name = "pkg-include",
    srcs = [":include"],
    prefix = "usr/include",
    strip_prefix = strip_prefix.from_pkg(),
    visibility = ["//visibility:public"],
)

pkg_files(
    name = "pkg-extra-runtime-include",
    srcs = [":extra-runtime-include"],
    prefix = "usr/include",
    strip_prefix = strip_prefix.from_pkg("extra-runtime-include"),
    visibility = ["//visibility:public"],
)

pkg_files(
    name = "pkg-extra-runtime-deps",
    srcs = [
        "@boost//:context",  # for boost.coroutine2
        "@boost//:thread",
        "@glog",
    ],
    prefix = "usr/lib",
    strip_prefix = strip_prefix.files_only(),
    visibility = ["//visibility:public"],
)

pkg_filegroup(
    name = "pkg",
    srcs = [
        ":pkg-include",
        ":pkg-lib",
    ],
    visibility = ["//visibility:public"],
)

pkg_filegroup(
    name = "pkg-portable",
    srcs = [
        ":pkg",
        ":pkg-extra-runtime-deps",
        ":pkg-extra-runtime-include",
    ],
    visibility = ["//visibility:public"],
)
