# Copyright (c) 2024 RapidStream Design Automation, Inc. and contributors.
# All rights reserved. The contributor(s) of this file has/have agreed to the
# RapidStream Contributor License Agreement.

ARG DOCKER_USER_ID
ARG DOCKER_GROUP_ID

# Testing framework:
#   - bats (from source)
#   - parallel (from source)
#   - perl
#   - util-linux

# Required by Vivado:
#   - hostname
#   - libX11

# Required by us:
#   - gcc-c++
#   - iverilog (from source)
#   - ocl-icd
#   - tar (for installation)

RUN yum update -y && \
    # Update the following line to the latest date for retriggering the docker build
    echo "Installing system dependencies as of 20250325" && \
    yum install -y \
        autoconf \
        bison \
        bzip2 \
        flex \
        gcc-c++ \
        git \
        glibc-langpack-en \
        gperf \
        hostname \
        libX11 \
        libxcrypt-compat \
        ocl-icd \
        perl \
        shadow-utils \
        tar \
        util-linux \
    && \
    cd /tmp && \
      git clone https://github.com/bats-core/bats-core.git bats-core && \
      cd bats-core && \
      ./install.sh /usr/local && \
    cd /tmp && \
      curl -sSL https://github.com/steveicarus/iverilog/archive/refs/tags/v12_0.tar.gz | tar -xz && \
      cd iverilog-* && \
      autoconf && \
      ./configure && \
      make install -j $(nproc) && \
    cd /tmp && \
      curl -sSL https://ftp.gnu.org/gnu/parallel/parallel-latest.tar.bz2 | tar -xj && \
      cd parallel-* && \
      ./configure && \
      make install -j $(nproc) && \
    yum remove -y \
        autoconf \
        bison \
        bzip2 \
        flex \
        git \
        gperf \
    && \
    yum clean all && \
    rm -rf /tmp/* /var/tmp/* && \
    true

# Link libtinfo.so.6 to libtinfo.so.5 if it doesn't exist
RUN if [ ! -f /lib64/libtinfo.so.5 ]; then ln -s /lib64/libtinfo.so.6 /lib64/libtinfo.so.5; fi

# Remove the user and group with the same ID created by the base image if exists
RUN userdel -f $(getent passwd ${DOCKER_USER_ID} | cut -d: -f1) || true && \
    groupdel -f $(getent group ${DOCKER_GROUP_ID} | cut -d: -f1) || true

# Create a user for the test environment
RUN groupadd -g ${DOCKER_GROUP_ID} io && \
    useradd -u ${DOCKER_USER_ID} -g io -d /tmp io

USER io
ENV HOME="/tmp"
WORKDIR /tmp
