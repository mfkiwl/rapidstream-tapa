"""
TAPA is a dataflow HLS framework that features fast compilation, expressive
programming model and generates high-frequency FPGA accelerators.
"""

# Copyright (c) 2025 RapidStream Design Automation, Inc. and contributors.
# All rights reserved. The contributor(s) of this file has/have agreed to the
# RapidStream Contributor License Agreement.

module(name = "rapidstream-tapa")

# Bazel dependencies
bazel_dep(name = "aspect_rules_js", version = "2.3.7", dev_dependency = True)
bazel_dep(name = "aspect_rules_webpack", version = "0.17.0", dev_dependency = True)
bazel_dep(name = "bazel_skylib", version = "1.7.1", dev_dependency = True)
bazel_dep(name = "platforms", version = "1.0.0", dev_dependency = True)
bazel_dep(name = "rules_cc", version = "0.1.1", dev_dependency = True)
bazel_dep(name = "rules_nodejs", version = "6.4.0", dev_dependency = True)
bazel_dep(name = "rules_pkg", version = "1.1.0", dev_dependency = True)
bazel_dep(name = "rules_python", version = "1.4.1", dev_dependency = True)
bazel_dep(name = "rules_shell", version = "0.4.1", dev_dependency = True)
bazel_dep(name = "toolchains_llvm", version = "1.4.0", dev_dependency = True)

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm", dev_dependency = True)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

# LLVM toolchain
llvm.toolchain(
    llvm_versions = {
        # lastest version supporting Ubuntus
        "ubuntu-18.04-x86_64": "18.1.8",
        "ubuntu-20.04-x86_64": "18.1.8",
        "ubuntu-22.04-x86_64": "18.1.8",
        "ubuntu-24.04-x86_64": "18.1.8",
        "ubuntu-25.04-x86_64": "18.1.8",
        # lastest version supporting RHELs
        "rhel-8.6-x86_64": "14.0.0",
        "rhel-8.7-x86_64": "14.0.0",
        "rhel-8.8-x86_64": "14.0.0",
        "rhel-8.9-x86_64": "14.0.0",
        "rhel-8.10-x86_64": "14.0.0",
        "rhel-9.0-x86_64": "14.0.0",
        "rhel-9.1-x86_64": "14.0.0",
        "rhel-9.2-x86_64": "14.0.0",
        "rhel-9.3-x86_64": "14.0.0",
        "rhel-9.4-x86_64": "14.0.0",
        "rhel-9.5-x86_64": "14.0.0",
        # for other platforms, use the latest version
        # you are really on your own here
        "": "20.1.2",
    },
    stdlib = {"": "stdc++"},
)
use_repo(llvm, "llvm_toolchain")
use_repo(llvm, "llvm_toolchain_llvm")

register_toolchains(
    "@llvm_toolchain//:all",
    dev_dependency = True,
)

# Python toolchain
python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = "3.13.2",
)
use_repo(python, python_3_13 = "python_3_13_2")

# Node toolchain
node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node", dev_dependency = True)
node.toolchain(node_version = "17.9.1")  # lastest version supporting Ubuntu 18.04

# Required by tapa Python libraries
pip.parse(
    hub_name = "tapa_deps",
    python_version = "3.13.2",
    requirements_lock = "//tapa:requirements_lock.txt",
)
use_repo(pip, "tapa_deps")

# Required by tapacc
bazel_dep(name = "nlohmann_json", version = "3.12.0")

# Required by tapa-lib
bazel_dep(name = "rules_boost", repo_name = "com_github_nelhage_rules_boost")
git_override(
    module_name = "rules_boost",
    commit = "ec53a3b510be6a9fb41508cf884fe62d4098c5eb",
    patch_cmds = [
        # Enable BOOST_USE_SEGMENTED_STACKS
        # Enable BOOST_USE_ASAN
        # Dependency: BOOST_USE_UCONTEXT.
        """sed '/name = "context",/a defines=["BOOST_USE_ASAN","BOOST_USE_SEGMENTED_STACKS","BOOST_USE_UCONTEXT"],' -i boost.BUILD""",
        # Do not exclude fiber.cpp since we enable BOOST_USE_UCONTEXT
        "sed /fiber.cpp/d -i boost.BUILD",
    ],
    remote = "https://github.com/nelhage/rules_boost.git",
)

non_module_boost_repositories = use_extension("@com_github_nelhage_rules_boost//:boost/repositories.bzl", "non_module_dependencies")
use_repo(non_module_boost_repositories, "boost")

bazel_dep(name = "gflags", version = "2.2.2")

# glog must be 0.5.0 as in later versions, bazel is strictly required for
# including glog headers for the host code
bazel_dep(name = "glog", version = "0.5.0")
bazel_dep(name = "googletest", version = "1.17.0")

single_version_override(
    module_name = "glog",
    patches = ["//bazel:patches/glog/0001-Fix-unused-but-set-variable.patch"],
)

load_dependencies = use_extension(
    "//bazel:dependencies.bzl",
    "load_dependencies",
    dev_dependency = True,
)
use_repo(load_dependencies, "vitis_hls", "xsim_legacy_rdi", "xsim_xv")

# Required by FRT
bazel_dep(name = "tinyxml2", version = "10.0.0")
bazel_dep(name = "libuuid", version = "2.39.3.bcr.1")
bazel_dep(name = "yaml-cpp", version = "0.8.0")

OPENCL_VERSION = "2.3.3"

OPENCL_SHA256 = "8cd8e8e129db3081a64090fc1252bec39dc88cdb7b3f929315e014b75069bd9d"

http_archive(
    name = "OpenCL",
    patch_args = ["-p1"],
    patch_cmds = [
        """
        cat >BUILD <<EOF
cc_library(
    name = "OpenCL",
    srcs = [
        "ocl_icd_loader.c",
        "ocl_icd_loader_gen.c",
    ],
    hdrs = [
        "config.h",
        "ocl_icd.h",
        "ocl_icd_debug.h",
        "ocl_icd_loader.h",
        "ocl_icd_loader_gen.h",
    ] + glob(["khronos-headers/CL/*.h"]),
    copts = ["-Wno-sign-compare"],
    linkopts = ["-ldl"],
    defines = [
        "CLLAYERINFO",
        "CL_NO_NON_ICD_DISPATCH_EXTENSION_PROTOTYPES",
        "HAVE_CONFIG_H",
    ],
    includes = [".", "khronos-headers"],
    visibility = ["//visibility:public"],
)
EOF
        """,
        """
        cat >config.h <<EOF
#define ETC_OPENCL_LAYERS "/etc/OpenCL/layers"
#define ETC_OPENCL_VENDORS "/etc/OpenCL/vendors"
#define HAVE_CL_CL_LAYER_H 1
#define HAVE_DLFCN_H 1
#define HAVE_INTTYPES_H 1
#define HAVE_LIBDL 1
#define HAVE_MALLOC 1
#define HAVE_REALLOC 1
#define HAVE_STDINT_H 1
#define HAVE_STDIO_H 1
#define HAVE_STDLIB_H 1
#define HAVE_STRINGS_H 1
#define HAVE_STRING_H 1
#define HAVE_STRSTR 1
#define HAVE_SYS_STAT_H 1
#define HAVE_SYS_TYPES_H 1
#define HAVE_UNISTD_H 1
#define OCL_ICD_OPENCL_VERSION "1.2"
#define PACKAGE "ocl-icd"
#define PACKAGE_BUGREPORT "ocl-icd-devel@lists.forge.imag.fr"
#define PACKAGE_NAME "OpenCL ICD Loader"
#define PACKAGE_TARNAME "ocl-icd"
#define PACKAGE_URL ""
#define STDC_HEADERS 1
#define VERSION "{}"
#define PACKAGE_VERSION VERSION
#define PACKAGE_STRING "OpenCL ICD Loader " VERSION
EOF
        """.format(OPENCL_VERSION),
    ],
    patches = [
        "//bazel:patches/opencl/ocl_icd.h.patch",
        "//bazel:patches/opencl/ocl_icd_loader_gen.h.patch",
        "//bazel:patches/opencl/ocl_icd_loader_gen.c.patch",
    ],
    sha256 = OPENCL_SHA256,
    strip_prefix = "ocl-icd-{}".format(OPENCL_VERSION),
    urls = ["https://github.com/OCL-dev/ocl-icd/archive/refs/tags/v{}.tar.gz".format(OPENCL_VERSION)],
)

# Latest version of OpenCL-CLHPP supporting OpenCL 1.2
OPENCL_CLHPP_VERSION = "2023.02.06"

OPENCL_CLHPP_SHA256 = "2726106df611fb5cb65503a52df27988d80c0b8844c8f0901c6092ab43701e8c"

http_archive(
    name = "opencl-clhpp",
    patch_cmds = [
        """
        cat >BUILD <<EOF
cc_library(
    name = "opencl-clhpp",
    hdrs = glob(["include/**"]),
    includes = ["include"],
    visibility = ["//visibility:public"],
    deps = ["@OpenCL"],
)
EOF
""",
    ],
    sha256 = OPENCL_CLHPP_SHA256,
    strip_prefix = "OpenCL-CLHPP-{}".format(OPENCL_CLHPP_VERSION),
    urls = ["https://github.com/KhronosGroup/OpenCL-CLHPP/archive/refs/tags/v{}.tar.gz".format(OPENCL_CLHPP_VERSION)],
)

XRT_VERSION = "202420.2.18.179"

XRT_SHA256 = "8c03891c8a121631853c2144e4224e456f5658c81857585ac81ea990c8a00f1b"

http_archive(
    name = "xilinx_xrt",
    patch_cmds = [
        """
        cat >BUILD <<EOF
cc_library(
    name = "xilinx_xrt",
    hdrs = [
        "src/include/1_2/CL/cl2xrt.hpp",
        "src/include/1_2/CL/cl_ext_xilinx.h",
    ] + glob(["src/runtime_src/core/include/*.h"]),
    includes = [
        "src/runtime_src/core/include",
        "src/include/1_2"
    ],
    visibility = ["//visibility:public"],
    deps = ["@opencl-clhpp"],
)
EOF
""",
    ],
    sha256 = XRT_SHA256,
    strip_prefix = "XRT-{}".format(XRT_VERSION),
    urls = ["https://github.com/Xilinx/XRT/archive/refs/tags/{}.tar.gz".format(XRT_VERSION)],
)

# Required by nuitka build
bazel_dep(name = "patchelf", version = "0.18.0")

# For compatibility with GCC7
# Based on patches from https://github.com/bazelbuild/bazel-central-registry/tree/4f4bad8f463685498cf9e0a4ba45ffe9e290a853/modules/patchelf/0.18.0/patches
git_override(
    module_name = "patchelf",
    commit = "769337c227799aa60911562b6940530f4a86eb3c",
    patch_cmds = [
        # 0001-Add-MODULE.bazel.patch
        """
        cat >BUILD.bazel <<EOF
cc_binary(
    name = "patchelf",
    srcs = glob([
        "src/*.cc",
        "src/*.h",
    ]),
    copts = [
        "-std=c++17",
    ],
    local_defines = [
        "D_FILE_OFFSET_BITS=64",
    ],
    visibility = ["//visibility:public"],
)
EOF
""",
        # 0002-Add-BUILD.bazel.patch
        """
        cat >MODULE.bazel <<EOF
module(
    name = "patchelf",
    version = "0.18.0",
    compatibility_level = 0,
)
EOF
""",
    ],
    remote = "https://github.com/NixOS/patchelf.git",
)

# Build LLVM from source
LLVM_VERSION_MAJOR = 20

LLVM_VERSION_MINOR = 1

LLVM_VERSION_PATCH = 6

LLVM_VERSION = "{}.{}.{}".format(LLVM_VERSION_MAJOR, LLVM_VERSION_MINOR, LLVM_VERSION_PATCH)

LLVM_SHA256 = "5c70549d524284c184fe9fbff862c3d2d7a61b787570611b5a30e5cc345f145e"

# Based on patches from https://github.com/bazelbuild/bazel-central-registry/tree/707c0f939d1a801370aeb3a795e1a253a880f4f7/modules/llvm-project/17.0.3/patches
http_archive(
    name = "tapa-llvm-project",
    patch_args = ["-p1"],
    patch_cmds = [
        # 0002-Add-LLVM-Bazel-overlay-files.patch
        """
        cp -r utils/bazel/llvm-project-overlay/* .
        rm -rf utils/bazel
        """,
        # 0003-Add-MODULE.bazel.patch
        """
        cat >MODULE.bazel <<EOF
module(
    name = "llvm-project",
    version = "{}",
)

# Skylark dependencies
bazel_dep(name = "bazel_skylib", version = "1.7.1")

# Library dependencies
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_cc", version = "0.1.1")
EOF
        """.format(LLVM_VERSION),
        # 0004-Add-BUILD.bazel.patch
        """echo >BUILD.bazel""",
        # 0005-Add-Bazel-LLVM-targets.patch
        """echo 'llvm_targets = ["X86"]' >llvm/targets.bzl""",
        # 0006-Add-LLVM-version-vars.patch
        """
        cat >vars.bzl <<EOF
LLVM_VERSION = "{0}.{1}.{2}"
LLVM_VERSION_MAJOR = {0}
LLVM_VERSION_MINOR = {1}
LLVM_VERSION_PATCH = {2}
PACKAGE_VERSION = "{0}.{1}.{2}"
MAX_CLANG_ABI_COMPAT_VERSION = "{0}"
EOF
        """.format(LLVM_VERSION_MAJOR, LLVM_VERSION_MINOR, LLVM_VERSION_PATCH),
    ],
    patches = [
        "//bazel:patches/tapa-llvm-project/0001-Disable-zlib-zstd-mpfr-pfm-and-proto.patch",
        "//bazel:patches/tapa-llvm-project/0002-Add-TAPA-pragmas-to-Clang.patch",
        "//bazel:patches/tapa-llvm-project/0003-Wno-error.patch",
        "//bazel:patches/tapa-llvm-project/0004-Patch-missing-macro.patch",
    ],
    sha256 = LLVM_SHA256,
    strip_prefix = "llvm-project-{}.src".format(LLVM_VERSION),
    urls = ["https://github.com/llvm/llvm-project/releases/download/llvmorg-{0}/llvm-project-{0}.src.tar.xz".format(LLVM_VERSION)],
)

# Required by tapa-visualizer
npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//tapa-visualizer:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")
use_repo(pnpm, "pnpm")

# Test data
http_file(
    name = "facebook_combined",
    downloaded_file_path = "facebook.txt.gz",
    sha256 = "125e84db872eeba443d270c70315c256b0af43a502fcfe51f50621166ad035d7",
    url = "https://snap.stanford.edu/data/facebook_combined.txt.gz",
)

# Required to generate `compile_commands.json`
# Usage: `bazel run :refresh_compile_commands`
git_override(
    module_name = "hedron_compile_commands",
    commit = "4f28899228fb3ad0126897876f147ca15026151e",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
)

bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
