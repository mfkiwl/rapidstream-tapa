"""Core logic of TAPA."""

__copyright__ = """
Copyright (c) 2025 RapidStream Design Automation, Inc. and contributors.
All rights reserved. The contributor(s) of this file has/have agreed to the
RapidStream Contributor License Agreement.
"""

import decimal
import functools
import json
import logging
import os
import os.path
import shutil
import tarfile
import tempfile
from collections.abc import Generator
from pathlib import Path
from xml.etree import ElementTree as ET

import toposort
import yaml
from pyverilog.vparser.ast import (
    Always,
    Assign,
    Eq,
    Identifier,
    IfStatement,
    Input,
    IntConst,
    Minus,
    Node,
    NonblockingSubstitution,
    Output,
    Plus,
    PortArg,
    Reg,
    SingleStatement,
    StringConst,
    SystemCall,
    Wire,
)
from pyverilog.vparser.parser import ParseError

from tapa.instance import Instance
from tapa.program.directory import ProgramDirectoryMixin
from tapa.program.hls import ProgramHlsMixin
from tapa.program.pack import ProgramPackMixin
from tapa.program.synthesis import ProgramSynthesisMixin
from tapa.task import Task
from tapa.util import (
    get_instance_name,
    get_module_name,
)
from tapa.verilog.ast_utils import (
    make_block,
    make_case_with_block,
    make_if_with_block,
    make_port_arg,
    make_width,
)
from tapa.verilog.util import Pipeline, array_name, match_array_name, wire_name
from tapa.verilog.xilinx import generate_handshake_ports
from tapa.verilog.xilinx.async_mmap import (
    ASYNC_MMAP_SUFFIXES,
    generate_async_mmap_ioports,
    generate_async_mmap_ports,
    generate_async_mmap_signals,
)
from tapa.verilog.xilinx.const import (
    CLK_SENS_LIST,
    DONE,
    FALSE,
    HANDSHAKE_INPUT_PORTS,
    HANDSHAKE_OUTPUT_PORTS,
    IDLE,
    ISTREAM_SUFFIXES,
    OSTREAM_SUFFIXES,
    READY,
    RST,
    RST_N,
    START,
    STATE,
    TRUE,
)
from tapa.verilog.xilinx.module import Module, generate_m_axi_ports, get_streams_fifos

_logger = logging.getLogger().getChild(__name__)

STATE00 = IntConst("2'b00")
STATE01 = IntConst("2'b01")
STATE11 = IntConst("2'b11")
STATE10 = IntConst("2'b10")

FIFO_DIRECTIONS = ["consumed_by", "produced_by"]


class Program(  # TODO: refactor this class
    ProgramDirectoryMixin,
    ProgramHlsMixin,
    ProgramPackMixin,
    ProgramSynthesisMixin,
):
    """Describes a TAPA program.

    Attributes:
      top: Name of the top-level module.
      work_dir: Working directory.
      is_temp: Whether to delete the working directory after done.
      _tasks: Dict mapping names of tasks to Task objects.
      files: Dict mapping file names to contents that appear in the HDL directory.
      vitis_mode: Whether the generated RTL should match Vitis XO requirements.
    """

    # ruff: noqa: PLR0913,PLR0917
    def __init__(
        self,
        obj: dict,
        vitis_mode: bool,
        work_dir: str | None = None,
        gen_templates: tuple[str, ...] = (),
        floorplan_slots: list[str] = [],
        flattened: bool = False,
    ) -> None:
        """Construct Program object from a json file.

        Args:
          obj: json object.
          vitis_mode: Whether the generated RTL should match Vitis XO requirements.
          work_dir: Specify a working directory as a string. If None, a temporary
              one will be created.
          gen_templates: Tuple of task names that are templates. If a task is
              specified as a template, its verilog module will only contains io
              ports and no logic.
          floorplan_slots: Tasks that are generated by floorplanning.
          flattened: Whether the TAPA graph has been flattened.
        """
        self.top: str = obj["top"]
        self.cflags = " ".join(obj.get("cflags", []))
        self.vitis_mode = vitis_mode
        if work_dir is None:
            self.work_dir = tempfile.mkdtemp(prefix="tapa-")
            self.is_temp = True
        else:
            self.work_dir = os.path.abspath(work_dir)
            os.makedirs(self.work_dir, exist_ok=True)
            self.is_temp = False
        self._tasks: dict[str, Task] = {}

        task_names = toposort.toposort_flatten(
            {k: set(v.get("tasks", ())) for k, v in obj["tasks"].items()},
        )
        for template in gen_templates:
            assert template in task_names, (
                f"template task {template} not found in design"
            )
        self.gen_templates = gen_templates
        self.flattened = flattened

        for name in task_names:
            task_properties = obj["tasks"][name]
            task = Task(
                name=name,
                code=task_properties["code"],
                level=task_properties["level"],
                tasks=task_properties.get("tasks", {}),
                fifos=task_properties.get("fifos", {}),
                ports=task_properties.get("ports", []),
                target_type=task_properties["target"],
                is_slot=(name in floorplan_slots),
            )
            if not task.is_upper or task.tasks:
                self._tasks[name] = task

            # add non-synthesizable tasks to gen_templates
            if (
                task_properties["target"] == "non_synthesizable"
                and name not in self.gen_templates
            ):
                self.gen_templates += (name,)

        self.files: dict[str, str] = {}

    def __del__(self) -> None:
        if self.is_temp:
            shutil.rmtree(self.work_dir)

    @property
    def top_task(self) -> Task:
        return self._tasks[self.top]

    @property
    def start_q(self) -> Pipeline:
        return Pipeline(START.name)

    @property
    def done_q(self) -> Pipeline:
        return Pipeline(DONE.name)

    @staticmethod
    def _get_custom_rtl_files(rtl_paths: tuple[Path, ...]) -> list[Path]:
        custom_rtl: list[Path] = []
        for path in rtl_paths:
            if path.is_file():
                custom_rtl.append(path)
            elif path.is_dir():
                rtl_files = list(path.rglob("*"))
                if not rtl_files:
                    msg = f"no rtl files found in {path}"
                    raise ValueError(msg)
                custom_rtl.extend(rtl_files)
            elif path.exists():
                msg = f"unsupported path: {path}"
                raise ValueError(msg)
            else:
                msg = f"path does not exist: {path.absolute()}"
                raise ValueError(msg)
        return custom_rtl

    def get_task(self, name: str) -> Task:
        return self._tasks[name]

    @functools.cache
    def _get_hls_report_xml(self, name: str) -> ET.ElementTree:
        tree = ET.ElementTree()
        tree.parse(os.path.join(self.report_dir, f"{name}_csynth.xml"))
        return tree

    def _get_part_num(self, name: str) -> str:
        xml = self._get_hls_report_xml(name)
        part = xml.find("./UserAssignments/Part")
        assert part is not None
        assert part.text is not None
        return part.text

    def get_area(self, name: str) -> dict[str, int]:
        node = self._get_hls_report_xml(name).find("./AreaEstimates/Resources")
        assert node is not None
        return {x.tag: int(x.text or "-1") for x in sorted(node, key=lambda x: x.tag)}

    def get_clock_period(self, name: str) -> decimal.Decimal:
        xml = self._get_hls_report_xml(name)
        period = xml.find(
            "./PerformanceEstimates/SummaryOfTimingAnalysis/EstimatedClockPeriod",
        )
        assert period is not None
        assert period.text is not None
        return decimal.Decimal(period.text)

    def generate_task_rtl(self, print_fifo_ops: bool) -> None:
        """Extract HDL files from tarballs generated from HLS."""
        _logger.info("extracting RTL files")
        for task in self._tasks.values():
            with tarfile.open(self.get_tar_path(task.name), "r") as tarfileobj:
                tarfileobj.extractall(path=self.work_dir)

        for file_name in (
            "arbiter.v",
            "async_mmap.v",
            "axi_pipeline.v",
            "axi_crossbar_addr.v",
            "axi_crossbar_rd.v",
            "axi_crossbar_wr.v",
            "axi_crossbar.v",
            "axi_register_rd.v",
            "axi_register_wr.v",
            "detect_burst.v",
            "fifo.v",
            "fifo_bram.v",
            "fifo_fwd.v",
            "fifo_srl.v",
            "generate_last.v",
            "priority_encoder.v",
            "relay_station.v",
            "a_axi_write_broadcastor_1_to_3.v",
            "a_axi_write_broadcastor_1_to_4.v",
        ):
            shutil.copy(
                os.path.join(os.path.dirname(__file__), "assets", "verilog", file_name),
                self.rtl_dir,
            )

        # extract and parse RTL and populate tasks
        _logger.info("parsing RTL files and populating tasks")
        for task in self._tasks.values():
            _logger.debug("parsing %s", task.name)
            task.module = Module(
                files=[Path(self.get_rtl_path(task.name))],
                is_trimming_enabled=task.is_lower,
            )
            task.self_area = self.get_area(task.name)
            task.clock_period = self.get_clock_period(task.name)

            _logger.debug("populating %s", task.name)
            task.instances = tuple(
                Instance(self.get_task(name), instance_id=idx, **obj)
                for name, objs in task.tasks.items()
                for idx, obj in enumerate(objs)
            )

        # instrument the upper-level RTL except the top-level
        _logger.info("instrumenting upper-level RTL")
        for task in self._tasks.values():
            if task.is_upper and task.name != self.top:
                self._instrument_upper_and_template_task(task, print_fifo_ops)
            elif not task.is_upper and task.name in self.gen_templates:
                assert task.ports
                self._instrument_upper_and_template_task(task, print_fifo_ops)

    def generate_top_rtl(
        self,
        print_fifo_ops: bool,
        override_report_schema_version: str,
    ) -> None:
        """Instrument HDL files generated from HLS.

        Args:
            print_fifo_ops: Whether to print debugging info for FIFO operations.
            override_report_schema_version: Override the schema version with the
                given string, if non-empty.
        """
        if self.top_task.name in self.gen_templates:
            msg = "top task cannot be a template"
            raise ValueError(msg)

        # instrument the top-level RTL if it is a upper-level task
        if self.top_task.is_upper:
            self._instrument_upper_and_template_task(
                self.top_task,
                print_fifo_ops,
            )

        _logger.info("generating report")
        task_report = self.top_task.report
        if override_report_schema_version:
            task_report["schema"] = override_report_schema_version
        with open(self.report_paths.yaml, "w", encoding="utf-8") as fp:
            yaml.dump(task_report, fp, default_flow_style=False, sort_keys=False)
        with open(self.report_paths.json, "w", encoding="utf-8") as fp:
            json.dump(task_report, fp, indent=2)

        # self.files won't be populated until all tasks are instrumented
        _logger.info("writing generated auxiliary RTL files")
        for name, content in self.files.items():
            with open(os.path.join(self.rtl_dir, name), "w", encoding="utf-8") as fp:
                fp.write(content)

    def _connect_fifos(self, task: Task) -> None:
        _logger.debug("  connecting %s's children tasks", task.name)
        for fifo_name in task.fifos:
            for direction in task.get_fifo_directions(fifo_name):
                task_name, _, fifo_port = task.get_connection_to(fifo_name, direction)

                for suffix in task.get_fifo_suffixes(direction):
                    # declare wires for FIFOs
                    w_name = wire_name(fifo_name, suffix)
                    wire_width = (
                        self.get_task(task_name)
                        .module.get_port_of(fifo_port, suffix)
                        .width
                    )

                    wire = Wire(name=w_name, width=wire_width)
                    task.module.add_signals([wire])

            if task.is_fifo_external(fifo_name):
                task.connect_fifo_externally(
                    fifo_name, task.name == self.top and self.vitis_mode
                )

    def _instantiate_fifos(self, task: Task, print_fifo_ops: bool) -> None:
        _logger.debug("  instantiating FIFOs in %s", task.name)

        # skip instantiating if the fifo is not declared in this task
        fifos = {name: fifo for name, fifo in task.fifos.items() if "depth" in fifo}
        if not fifos:
            return

        col_width = max(
            max(
                len(name),
                len(get_instance_name(fifo["consumed_by"])),
                len(get_instance_name(fifo["produced_by"])),
            )
            for name, fifo in fifos.items()
        )

        for fifo_name, fifo in fifos.items():
            _logger.debug("    instantiating %s.%s", task.name, fifo_name)

            # add FIFO instances
            task.module.add_fifo_instance(
                name=fifo_name,
                rst=RST,
                width=self.get_fifo_width(task, fifo_name),
                depth=fifo["depth"],
            )

            if not print_fifo_ops:
                continue

            # print debugging info
            debugging_blocks = []
            fmtargs = {
                "fifo_prefix": "\\033[97m",
                "fifo_suffix": "\\033[0m",
                "task_prefix": "\\033[90m",
                "task_suffix": "\\033[0m",
            }
            for suffixes, fmt, fifo_tag in zip(
                (ISTREAM_SUFFIXES, OSTREAM_SUFFIXES),
                (
                    "DEBUG: R: {fifo_prefix}{fifo:>{width}}{fifo_suffix} -> "
                    "{task_prefix}{task:<{width}}{task_suffix} %h",
                    "DEBUG: W: {task_prefix}{task:>{width}}{task_suffix} -> "
                    "{fifo_prefix}{fifo:<{width}}{fifo_suffix} %h",
                ),
                ("consumed_by", "produced_by"),
            ):
                display = SingleStatement(
                    statement=SystemCall(
                        syscall="display",
                        args=(
                            StringConst(
                                value=fmt.format(
                                    width=col_width,
                                    fifo=fifo_name,
                                    task=(get_instance_name(fifo[fifo_tag])),
                                    **fmtargs,
                                ),
                            ),
                            Identifier(name=wire_name(fifo_name, suffixes[0])),
                        ),
                    ),
                )
                debugging_blocks.append(
                    Always(
                        sens_list=CLK_SENS_LIST,
                        statement=make_block(
                            IfStatement(
                                cond=Eq(
                                    left=Identifier(
                                        name=wire_name(fifo_name, suffixes[-1]),
                                    ),
                                    right=TRUE,
                                ),
                                true_statement=make_block(display),
                                false_statement=None,
                            ),
                        ),
                    ),
                )
            task.module.add_logics(debugging_blocks)

    def _instantiate_children_tasks(  # noqa: C901,PLR0912,PLR0915,PLR0914  # TODO: refactor this method
        self,
        task: Task,
        width_table: dict[str, int],
    ) -> list[Pipeline]:
        _logger.debug("  instantiating children tasks in %s", task.name)
        is_done_signals: list[Pipeline] = []
        arg_table: dict[str, Pipeline] = {}
        async_mmap_args: dict[Instance.Arg, list[str]] = {}

        task.add_m_axi(width_table, self.files)

        # Wires connecting to the upstream (s_axi_control).
        fsm_upstream_portargs: list[PortArg] = [
            make_port_arg(x, x) for x in HANDSHAKE_INPUT_PORTS + HANDSHAKE_OUTPUT_PORTS
        ]
        fsm_upstream_module_ports = {}  # keyed by arg.name for deduplication

        # Wires connecting to the downstream (task instances).
        fsm_downstream_portargs: list[PortArg] = []
        fsm_downstream_module_ports = []

        for instance in task.instances:
            child_port_set = set(instance.task.module.ports)

            # add signal declarations
            for arg in instance.args:
                if not arg.cat.is_stream:
                    # Find arg width.
                    width = 64  # 64-bit address
                    if arg.cat.is_scalar:
                        width = width_table.get(arg.name, 0)
                        if width == 0:
                            # Constant literals are not in the width table.
                            width = int(arg.name.split("'d")[0])

                    # For mmap ports, the scalar port is the offset.
                    upper_name = (
                        f"{arg.name}_offset"
                        if arg.cat.is_sync_mmap or arg.cat.is_async_mmap
                        else arg.name
                    )

                    # Find identifier name of the arg. May be a constant with "'d" in it
                    # If `arg` is an hmap, `upper_name` refers to the mmap offset, which
                    # needs to be set to 0. The actual address mapping will be handled
                    # between the AXI interconnect and the upstream M-AXI interface.
                    id_name = "64'd0" if arg.chan_count is not None else upper_name
                    # upper_name may be a constant

                    # Instantiate a pipeline for the arg.
                    q = Pipeline(
                        name=instance.get_instance_arg(id_name),
                        width=width,
                    )
                    arg_table[arg.name] = q

                    # Add signals only for non-consts. Constants are passed as literals.
                    if "'d" not in q.name:
                        task.module.add_signals(
                            [
                                Wire(name=q[-1].name, width=make_width(width)),
                            ]
                        )
                        task.fsm_module.add_pipeline(q, init=Identifier(id_name))
                        _logger.debug("    pipelined signal: %s => %s", id_name, q.name)
                        fsm_upstream_module_ports.setdefault(
                            upper_name,
                            Input(upper_name, make_width(width)),
                        )
                        fsm_downstream_module_ports.append(
                            Output(q[-1].name, make_width(width)),
                        )
                        fsm_downstream_portargs.append(
                            make_port_arg(q[-1].name, q[-1].name),
                        )

                # upper_name is the upper-level name
                # arg.port is the lower-level name

                # check which ports are used for async_mmap
                if arg.cat.is_async_mmap:
                    for tag in ASYNC_MMAP_SUFFIXES:
                        if {
                            x.portname
                            for x in generate_async_mmap_ports(
                                tag=tag,
                                port=arg.port,
                                arg=upper_name,
                                offset_name=arg_table[arg.name][-1],
                                instance=instance,
                            )
                        } & child_port_set:
                            async_mmap_args.setdefault(arg, []).append(tag)

                # declare wires or forward async_mmap ports
                for tag in async_mmap_args.get(arg, []):
                    if task.is_upper and instance.task.is_lower:
                        task.module.add_signals(
                            generate_async_mmap_signals(
                                tag=tag,
                                arg=arg.mmap_name,
                                data_width=width_table[arg.name],
                            ),
                        )
                    else:
                        task.module.add_ports(
                            generate_async_mmap_ioports(
                                tag=tag,
                                arg=upper_name,
                                data_width=width_table[arg.name],
                            ),
                        )

            # add start registers
            start_q = Pipeline(f"{instance.start.name}_global")
            task.fsm_module.add_pipeline(start_q, self.start_q[0])

            if instance.is_autorun:
                # autorun modules start when the global start signal is asserted
                task.fsm_module.add_logics(
                    [
                        Always(
                            sens_list=CLK_SENS_LIST,
                            statement=make_block(
                                make_if_with_block(
                                    cond=RST,
                                    true=NonblockingSubstitution(
                                        left=instance.start,
                                        right=FALSE,
                                    ),
                                    false=make_if_with_block(
                                        cond=start_q[-1],
                                        true=NonblockingSubstitution(
                                            left=instance.start,
                                            right=TRUE,
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ],
                )
            else:
                # set up state
                is_done_q = Pipeline(f"{instance.is_done.name}")
                done_q = Pipeline(f"{instance.done.name}_global")
                task.fsm_module.add_pipeline(is_done_q, instance.is_state(STATE10))
                task.fsm_module.add_pipeline(done_q, self.done_q[0])

                if_branch = instance.set_state(STATE00)
                else_branch = (
                    make_if_with_block(
                        cond=instance.is_state(STATE00),
                        true=make_if_with_block(
                            cond=start_q[-1],
                            true=instance.set_state(STATE01),
                        ),
                    ),
                    make_if_with_block(
                        cond=instance.is_state(STATE01),
                        true=make_if_with_block(
                            cond=instance.ready,
                            true=make_if_with_block(
                                cond=instance.done,
                                true=instance.set_state(STATE10),
                                false=instance.set_state(STATE11),
                            ),
                        ),
                    ),
                    make_if_with_block(
                        cond=instance.is_state(STATE11),
                        true=make_if_with_block(
                            cond=instance.done,
                            true=instance.set_state(STATE10),
                        ),
                    ),
                    make_if_with_block(
                        cond=instance.is_state(STATE10),
                        true=make_if_with_block(
                            cond=done_q[-1],
                            true=instance.set_state(STATE00),
                        ),
                    ),
                )
                task.fsm_module.add_logics(
                    [
                        Always(
                            sens_list=CLK_SENS_LIST,
                            statement=make_block(
                                make_if_with_block(
                                    cond=RST,
                                    true=if_branch,
                                    false=else_branch,
                                ),
                            ),
                        ),
                        Assign(
                            left=instance.start,
                            right=instance.is_state(STATE01),
                        ),
                    ],
                )

                is_done_signals.append(is_done_q)

            # insert handshake signals
            fsm_downstream_portargs.extend(
                make_port_arg(x.name, x.name) for x in instance.public_handshake_signals
            )
            task.module.add_signals(
                Wire(x.name, x.width) for x in instance.public_handshake_signals
            )
            task.fsm_module.add_signals(instance.all_handshake_signals)
            fsm_downstream_module_ports.extend(instance.public_handshake_ports)

            # add task module instances
            portargs = list(generate_handshake_ports(instance, RST_N))
            for arg in instance.args:
                if arg.cat.is_scalar:
                    portargs.append(
                        PortArg(portname=arg.port, argname=arg_table[arg.name][-1]),
                    )
                elif arg.cat.is_istream:
                    portargs.extend(
                        instance.task.module.generate_istream_ports(
                            port=arg.port,
                            arg=arg.name,
                            ignore_peek_fifos=(arg.port,)
                            if instance.task.is_slot
                            else (),
                        ),
                    )
                elif arg.cat.is_ostream:
                    portargs.extend(
                        instance.task.module.generate_ostream_ports(
                            port=arg.port,
                            arg=arg.name,
                        ),
                    )
                elif arg.cat.is_sync_mmap:
                    portargs.extend(
                        generate_m_axi_ports(
                            module=instance.task.module,
                            port=arg.port,
                            arg=arg.mmap_name,
                            arg_reg=arg_table[arg.name][-1].name,
                        ),
                    )
                elif arg.cat.is_async_mmap:
                    for tag in async_mmap_args[arg]:
                        portargs.extend(
                            generate_async_mmap_ports(
                                tag=tag,
                                port=arg.port,
                                arg=arg.mmap_name,
                                offset_name=arg_table[arg.name][-1],
                                instance=instance,
                            ),
                        )

            task.module.add_instance(
                module_name=get_module_name(instance.task.name),
                instance_name=instance.name,
                ports=portargs,
            )

        # Add scalar ports to the FSM module.
        fsm_upstream_portargs.extend(
            [make_port_arg(x.name, x.name) for x in fsm_upstream_module_ports.values()]
        )
        task.fsm_module.add_ports(fsm_upstream_module_ports.values())
        task.fsm_module.add_ports(fsm_downstream_module_ports)
        task.add_rs_pragmas_to_fsm()

        # instantiate async_mmap modules at the upper levels
        # the base address may not be 0, so must use full 64 bit
        addr_width = 64
        _logger.debug("Set the address width of async_mmap to %d", addr_width)

        if task.is_upper:
            for arg, tag in async_mmap_args.items():
                task.module.add_async_mmap_instance(
                    name=arg.mmap_name,
                    tags=tag,
                    rst=RST,
                    data_width=width_table[arg.name],
                    addr_width=addr_width,
                )

            task.module.add_instance(
                module_name=task.fsm_module.name,
                instance_name="__tapa_fsm_unit",
                ports=fsm_upstream_portargs + fsm_downstream_portargs,
            )

        return is_done_signals

    def _instantiate_global_fsm(
        self,
        module: Module,
        is_done_signals: list[Pipeline],
    ) -> None:
        # global state machine

        def is_state(state: IntConst) -> Eq:
            return Eq(left=STATE, right=state)

        def set_state(state: IntConst) -> NonblockingSubstitution:
            return NonblockingSubstitution(left=STATE, right=state)

        module.add_signals(
            [
                Reg(STATE.name, width=make_width(2)),
            ],
        )

        state01_action = set_state(STATE10)
        if is_done_signals:
            state01_action = make_if_with_block(
                cond=Identifier(" && ".join(str(x[-1]) for x in is_done_signals)),
                true=state01_action,
            )

        global_fsm = make_case_with_block(
            comp=STATE,
            cases=[
                (
                    STATE00,
                    make_if_with_block(cond=self.start_q[-1], true=set_state(STATE01)),
                ),
                (
                    STATE01,
                    state01_action,
                ),
                (
                    STATE10,
                    [
                        set_state(STATE00),
                    ],
                ),
            ],
        )

        module.add_logics(
            [
                Always(
                    sens_list=CLK_SENS_LIST,
                    statement=make_block(
                        make_if_with_block(
                            cond=RST,
                            true=set_state(STATE00),
                            false=global_fsm,
                        ),
                    ),
                ),
                Assign(left=IDLE, right=is_state(STATE00)),
                Assign(left=DONE, right=self.done_q[-1]),
                Assign(left=READY, right=self.done_q[0]),
            ],
        )

        module.add_pipeline(self.start_q, init=START)
        module.add_pipeline(self.done_q, init=is_state(STATE10))

    def _instrument_upper_and_template_task(  # noqa: C901, PLR0912 # TODO: refactor this method
        self,
        task: Task,
        print_fifo_ops: bool,
    ) -> None:
        """Codegen for the top task."""
        # assert task.is_upper
        task.module.cleanup()
        if task.name == self.top and self.vitis_mode:
            task.module.add_rs_pragmas()

        # remove top level peek ports
        if task.name == self.top_task.name:
            _logger.debug("remove top peek ports")
            for port_name, port in task.ports.items():
                if port.cat.is_istream:
                    fifos = [port_name]
                elif port.is_istreams:
                    fifos = get_streams_fifos(task.module, port_name)
                else:
                    continue
                for fifo in fifos:
                    for suffix in ISTREAM_SUFFIXES:
                        match = match_array_name(fifo)
                        if match is None:
                            peek_port = f"{fifo}_peek"
                        else:
                            peek_port = array_name(f"{match[0]}_peek", match[1])

                        # Cannot use find_ports instead of get_port_of
                        # since find port only check if the port name start with
                        # the given fifo name and end with the suffix. This causes
                        # wrong port being matched.
                        # e.g. fifo = "a_fifo", suffix = "dout", find_ports will
                        # match both "a_fifo_dout" and "a_fifo_ack_dout" even
                        # though the latter has fifo name "a_fifo_ack" instead of
                        # "a_fifo".
                        try:
                            task.module.get_port_of(peek_port, suffix)
                        except Module.NoMatchingPortError:
                            continue

                        name = task.module.get_port_of(peek_port, suffix).name
                        _logger.debug("  remove %s", name)
                        task.module.del_port(name)

        if task.name in self.gen_templates:
            _logger.info("skip instrumenting template task %s", task.name)
            if task.name in self.gen_templates:
                with open(
                    self.get_rtl_template_path(task.name), "w", encoding="utf-8"
                ) as rtl_code:
                    rtl_code.write(task.module.get_template_code())
        else:
            self._instantiate_fifos(task, print_fifo_ops)
            self._connect_fifos(task)
            width_table = {port.name: port.width for port in task.ports.values()}
            is_done_signals = self._instantiate_children_tasks(task, width_table)
            self._instantiate_global_fsm(task.fsm_module, is_done_signals)

            with open(
                self.get_rtl_path(task.fsm_module.name),
                "w",
                encoding="utf-8",
            ) as rtl_code:
                rtl_code.write(task.fsm_module.code)

        # generate the top-level task
        with open(self.get_rtl_path(task.name), "w", encoding="utf-8") as rtl_code:
            rtl_code.write(task.module.code)

    def get_fifo_width(self, task: Task, fifo: str) -> Node:
        producer_task, _, fifo_port = task.get_connection_to(fifo, "produced_by")
        port = self.get_task(producer_task).module.get_port_of(
            fifo_port,
            OSTREAM_SUFFIXES[0],
        )
        # TODO: err properly if not integer literals
        return Plus(Minus(port.width.msb, port.width.lsb), IntConst(1))

    def replace_custom_rtl(
        self, rtl_paths: tuple[Path, ...], templates_info: dict[str, list[str]]
    ) -> None:
        """Add custom RTL files to the project.

        It will replace all files that originally exist in the project.

        Args:
            rtl_paths: List of file paths to copy.
            templates_info: The target folder where files will be copied.
        """
        rtl_path = Path(self.rtl_dir)
        assert Path.exists(rtl_path)

        custom_rtl = self._get_custom_rtl_files(rtl_paths)
        _logger.info("Adding custom RTL files to the project:")
        for file_path in custom_rtl:
            _logger.info("  %s", file_path)
        self._check_custom_rtl_format(custom_rtl, templates_info)

        for file_path in custom_rtl:
            assert file_path.is_file()

            # Determine destination path
            dest_path = rtl_path / file_path.name

            if dest_path.exists():
                _logger.info("Replacing %s with custom RTL.", file_path.name)
            else:
                _logger.info("Adding custom RTL %s.", file_path.name)

            # Copy file to destination, replacing if necessary
            shutil.copy2(file_path, dest_path)

    def get_rtl_templates_info(self) -> dict[str, list[str]]:
        """Get the template information for each task.

        Return:
            dict[str, list[str]]: A dictionary where the key is the task
            name and the value is the list of ports of the task.
        """
        return {
            task: [str(port) for port in self._tasks[task].module.ports.values()]
            for task in self.gen_templates
        }

    def _check_custom_rtl_format(
        self, rtl_paths: list[Path], templates_info: dict[str, list[str]]
    ) -> None:
        """Check if the custom RTL files are in the correct format."""
        if rtl_paths:
            _logger.info("checking custom RTL files format")
        for rtl_path in rtl_paths:
            if rtl_path.suffix != ".v":
                _logger.warning(
                    "Skip checking custom rtl format for non-verilog file: %s",
                    str(rtl_path),
                )
                continue
            try:
                rtl_module = Module([rtl_path])
            except ParseError:
                msg = (
                    f"Failed to parse custom RTL file: {rtl_path!s}. "
                    "Skip port checking."
                )
                _logger.warning(msg)
                continue
            if (task := self._tasks.get(rtl_module.name)) is None:
                continue  # ignore RTL modules that are not tasks
            if {str(port) for port in rtl_module.ports.values()} == set(
                templates_info[task.name]
            ):
                continue  # ports match exactly
            msg = [
                f"Custom RTL file {rtl_path} for task {task.name}"
                " does not match the expected ports.",
                "Task ports:",
                *(f"  {port}" for port in templates_info[task.name]),
                "Custom RTL ports:",
                *(f"  {port}" for port in rtl_module.ports.values()),
            ]
            _logger.warning("\n".join(msg))

    def _find_task_inst_hierarchy(
        self,
        target_task: str,
        current_task: str,
        current_inst: str,
        current_hierarchy: tuple[str, ...],
    ) -> Generator[tuple[str, ...]]:
        """Find hierarchies of all instances of the given task name."""
        if current_task == target_task:
            yield (*current_hierarchy, current_inst)
        for inst in self._tasks[current_task].instances:
            assert inst.name
            self._find_task_inst_hierarchy(
                target_task,
                inst.task.name,
                inst.name,
                (*current_hierarchy, current_inst),
            )

    @staticmethod
    def get_inst_by_port_arg_name(
        target_task: str | None, parent_task: Task, port_arg_name: str
    ) -> Instance:
        """Get the instance of the target task that connect to the port arg name.

        If target_task is None, return the first instance that connects to the port arg
        name. If target_task is not None, return the instance that connects to the port
        arg name and is of the target task.
        """
        matched_inst = None
        for inst in parent_task.instances:
            if target_task and inst.task.name != target_task:
                continue
            for arg in inst.args:
                if arg.name == port_arg_name:
                    matched_inst = inst
                    break
        assert matched_inst is not None
        return matched_inst

    def get_grouping_constraints(
        self, nonpipeline_fifos: list[str] | None = None
    ) -> list[list[str]]:
        """Generates the grouping constraints based on critical path."""
        _logger.info("Resolving grouping constraints from non-pipeline FIFOs")

        if not nonpipeline_fifos:
            return []

        grouping_constraints = []
        for task_fifo_name in nonpipeline_fifos:
            # dfs all tasks to find all task instances
            task_name, fifo_name = tuple(task_fifo_name.split("."))
            found_hierarchies = self._find_task_inst_hierarchy(
                task_name, self.top, self.top, ()
            )
            fifo = self._tasks[task_name].fifos[fifo_name]
            assert all(direction in fifo for direction in FIFO_DIRECTIONS)
            consumer_task: str = fifo["consumed_by"][0]
            producer_task: str = fifo["produced_by"][0]
            for hierarchy in found_hierarchies:
                # find fifo producer and consumer instance names as fifo object only
                # contains task names
                producer_inst = self.get_inst_by_port_arg_name(
                    producer_task, self._tasks[task_name], fifo_name
                ).name
                consumer_inst = self.get_inst_by_port_arg_name(
                    consumer_task, self._tasks[task_name], fifo_name
                ).name

                grouping_constraints.append(
                    [
                        "/".join((*hierarchy, producer_inst)),
                        "/".join((*hierarchy, fifo_name)),
                        "/".join((*hierarchy, consumer_inst)),
                    ]
                )

        return grouping_constraints
